
# Generated by stc version 0.6.0
# date                    : 2016/08/17 19:05:22
# Turbine version         : 0.6.0
# Input filename          : /home/azza/swift-project/Swift-Variant-Calling/align.swift
# Output filename         : /home/azza/swift-project/Swift-Variant-Calling
# STC home                : /usr/local/src/swift-t-0.9.0/stc
# Turbine home            : /usr/local/src/swift-t-0.9.0/turbine
# Compiler settings:
# stc.auto-declare              : true
# stc.c_preprocess              : true
# stc.checkpointing             : true
# stc.compiler-debug            : true
# stc.debugging                 : COMMENTS
# stc.ic.output-file            : 
# stc.input_filename            : align.swift
# stc.log.file                  : 
# stc.log.trace                 : false
# stc.must_pass_wait_vars       : true
# stc.opt.algebra               : true
# stc.opt.array-build           : true
# stc.opt.batch-refcounts       : true
# stc.opt.cancel-refcounts      : true
# stc.opt.constant-fold         : true
# stc.opt.controlflow-fusion    : true
# stc.opt.dataflow-op-inline    : true
# stc.opt.dead-code-elim        : true
# stc.opt.demote-globals        : true
# stc.opt.disable-asserts       : false
# stc.opt.expand-loop-threshold-insts: 256
# stc.opt.expand-loop-threshold-iters: 16
# stc.opt.expand-loops          : false
# stc.opt.finalized-var         : true
# stc.opt.flatten-nested        : true
# stc.opt.full-function-inline  : false
# stc.opt.full-unroll           : false
# stc.opt.function-always-inline-threshold: 5
# stc.opt.function-inline       : true
# stc.opt.function-inline-threshold: 50
# stc.opt.function-signature    : true
# stc.opt.hoist                 : true
# stc.opt.hoist-refcounts       : true
# stc.opt.loop-simplify         : true
# stc.opt.max-iterations        : 10
# stc.opt.merge-refcounts       : true
# stc.opt.piggyback-refcounts   : true
# stc.opt.pipeline              : false
# stc.opt.propagate-aliases     : true
# stc.opt.reorder-insts         : false
# stc.opt.shared-constants      : true
# stc.opt.unroll-loop-threshold-insts: 192
# stc.opt.unroll-loop-threshold-iters: 8
# stc.opt.unroll-loops          : true
# stc.opt.value-number          : true
# stc.opt.wait-coalesce         : true
# stc.output_filename           : 
# stc.preproc.force-cpp         : false
# stc.preproc.force-gcc         : false
# stc.preprocess_only           : false
# stc.profile                   : false
# stc.refcounting               : true
# stc.rpath                     : 
# stc.stc_home                  : /usr/local/src/swift-t-0.9.0/stc
# stc.turbine.version           : 0.6.0
# stc.turbine_home              : /usr/local/src/swift-t-0.9.0/turbine
# stc.version                   : 0.6.0

# Metadata:

package require turbine 0.6.0
namespace import turbine::*


proc swift:constants {  } {
    turbine::c::log "function:swift:constants"
    global c:s_u
    turbine::allocate_custom c:s_u string 1 1 1 1
    turbine::store_string ${c:s_u} "-u"
}


proc swift:main {  } {
    turbine::c::log "function: __entry"
    # Var: string t:7 EXPR_TEMPORARY align.swift:88:33
    # Var: $string v:configFilename VALUE_OF [string:configFilename]
    # Var: file u:configFile align.swift:83:0
    # Var: file u:sampleInfoFile align.swift:88:0
    # Var: string[string] u:vars align.swift:86:0
    # Var: string t:11 EXPR_TEMPORARY align.swift:__entry():99:88
    # Var: string t:13 EXPR_TEMPORARY align.swift:__entry():99:106
    # Var: string t:15 EXPR_TEMPORARY align.swift:__entry():99:148
    # Var: string t:18 EXPR_TEMPORARY align.swift:__entry():101:25
    # Var: string t:23 EXPR_TEMPORARY align.swift:__entry():102:25
    # Var: string t:53 EXPR_TEMPORARY align.swift:__entry():117:12
    # Var: $file v:configFile VALUE_OF [file:configFile]
    # Var: $file v:configFile:1 VALUE_OF [file:configFile]
    # Var: $string$[int] v:configFileData VALUE_OF [string[int]:configFileData]
    # Var: boolean t:52 EXPR_TEMPORARY align.swift:__entry():117:39
    lassign [ adlb::multicreate [ list string 1 1 2 ] [ list container string string 8 1 5 ] [ list string 1 1 6 ] [ list string 1 1 7 ] [ list string 1 1 8 ] [ list string 1 1 9 ] [ list string 1 1 10 ] [ list string 2 1 11 ] [ list integer 1 1 12 ] ] t:7 u:vars t:11 t:13 t:15 t:18 t:23 t:53 t:52
    turbine::c::log "allocated t:7=<${t:7}> u:vars=<${u:vars}> t:11=<${t:11}> t:13=<${t:13}> t:15=<${t:15}>"
    turbine::c::log "allocated t:18=<${t:18}> t:23=<${t:23}> t:53=<${t:53}> t:52=<${t:52}>"
    lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 1 1 3 ] [ list file 1 1 4 ] ] [ list 0 0 ] ] u:configFile u:sampleInfoFile
    turbine::argv_accept_impl [ list "runfile" ]
    set v:configFilename [ turbine::argv_get_impl "runfile" ]
    set tcltmp:init_rc 1
    set v:configFile [ turbine::create_local_file_ref "" ${tcltmp:init_rc} 0 ]
    turbine::input_file_local v:configFile ${v:configFilename}
    turbine::store_file ${u:configFile} v:configFile 1
    set v:configFile:1 [ turbine::retrieve_file ${u:configFile} CACHED 1 ]
    set v:configFileData [ turbine::file_lines_impl ${v:configFile:1} ]
    turbine::container_reference ${u:vars} "SAMPLEINFORMATION" ${t:7} string
    turbine::container_reference ${u:vars} "SAMPLELB" ${t:11} string
    turbine::container_reference ${u:vars} "SAMPLEPL" ${t:13} string
    turbine::container_reference ${u:vars} "SAMPLECN" ${t:15} string
    turbine::container_reference ${u:vars} "TMPDIR" ${t:18} string
    turbine::container_reference ${u:vars} "OUTPUTDIR" ${t:23} string
    turbine::container_reference ${u:vars} "MARKDUPLICATESTOOL" ${t:53} string
    dict for {tcltmp:ignore v:line} ${v:configFileData} {
        # Var: string[int] u:keyValuePair RENAMED [string[int]:keyValuePair] align.swift:getConfigVariables():70:2
        # Var: $string$[int] v:keyValuePair VALUE_OF [string[int]:keyValuePair]
        # Var: $string v:alias:name VALUE_OF [string:__alias:name]
        # Var: $string v:alias:value VALUE_OF [string:__alias:value]
        lassign [ adlb::multicreate [ list container integer string 1 2 13 ] ] u:keyValuePair
        turbine::c::log "allocated u:keyValuePair=<${u:keyValuePair}>"
        set v:keyValuePair [ turbine::split_impl ${v:line} "=" ]
        turbine::build_rec ${u:keyValuePair} ${v:keyValuePair} [ list container integer string ] 0 1
        set a:name [ adlb::subscript_container ${u:keyValuePair} 0 ]
        set v:alias:name [ turbine::retrieve_string ${a:name} ]
        set a:value [ adlb::subscript_container ${u:keyValuePair} 1 ]
        set v:alias:value [ turbine::retrieve_string ${a:value} CACHED 1 ]
        turbine::container_insert ${u:vars} ${v:alias:name} ${v:alias:value} string 0
        adlb::write_refcount_decr ${u:keyValuePair} 1
    }
    turbine::rule [ list ${t:7} ] "__entry-call_foreign-input_file ${t:11} ${t:13} ${t:15} ${t:18} ${t:23} ${t:52} ${t:53} ${t:7} {${u:sampleInfoFile}} ${u:vars}"
    turbine::rule [ list ${t:53} ] "__entry-async_op-eq_string-2 ${t:52} ${t:53}"
    turbine::decr_local_file_refcount v:configFile
    adlb::write_refcount_decr ${u:vars} 1
}


proc __entry-call_foreign-input_file { t:11 t:13 t:15 t:18 t:23 t:52 t:53 t:7 u:sampleInfoFile u:vars } {
    # Var: $string v:t:7 VALUE_OF [string:__t:7]
    # Var: $file v:sampleInfoFile VALUE_OF [file:sampleInfoFile]
    # Var: $file v:sampleInfoFile:1 VALUE_OF [file:sampleInfoFile]
    # Var: $string$[int] v:sampleLines VALUE_OF [string[int]:sampleLines]
    set v:t:7 [ turbine::retrieve_string ${t:7} CACHED 1 ]
    set tcltmp:init_rc 1
    set v:sampleInfoFile [ turbine::create_local_file_ref "" ${tcltmp:init_rc} 0 ]
    turbine::input_file_local v:sampleInfoFile ${v:t:7}
    turbine::store_file ${u:sampleInfoFile} v:sampleInfoFile 1
    set v:sampleInfoFile:1 [ turbine::retrieve_file ${u:sampleInfoFile} CACHED 1 ]
    set v:sampleLines [ turbine::file_lines_impl ${v:sampleInfoFile:1} ]
    set tcltmp:iters [ dict size ${v:sampleLines} ]
    turbine::read_refcount_incr ${t:18} [ expr { 2 * ${tcltmp:iters} } ]
    turbine::read_refcount_incr ${t:13} [ expr { ${tcltmp:iters} } ]
    turbine::read_refcount_incr ${t:15} [ expr { ${tcltmp:iters} } ]
    turbine::read_refcount_incr ${t:53} [ expr { ${tcltmp:iters} } ]
    turbine::read_refcount_incr ${t:11} [ expr { ${tcltmp:iters} } ]
    turbine::read_refcount_incr ${u:vars} [ expr { 2 * ${tcltmp:iters} } ]
    turbine::read_refcount_incr ${t:23} [ expr { ${tcltmp:iters} } ]
    turbine::read_refcount_incr ${t:52} [ expr { ${tcltmp:iters} } ]
    dict for {tcltmp:ignore v:sample} ${v:sampleLines} {
        # Var: string[int] u:sampleInfo align.swift:__entry():92:1
        # Var: string u:read1 align.swift:__entry():94:1
        # Var: string u:read2 align.swift:__entry():95:1
        # Var: string u:rgheader align.swift:__entry():99:1
        # Var: string t:17 EXPR_TEMPORARY align.swift:__entry():101:18
        # Var: file u:alignedsam align.swift:__entry():101:63
        # Var: string t:22 EXPR_TEMPORARY align.swift:__entry():102:18
        # Var: file u:alignedbam align.swift:__entry():102:66
        # Var: file u:dedupsam align.swift:__entry():103:62
        # Var: file u:dedupbam align.swift:__entry():104:65
        # Var: file u:dedupsortedbam align.swift:__entry():105:71
        # Var: string t:42 EXPR_TEMPORARY align.swift:__entry():106:24
        # Var: file u:alignedsortedbam align.swift:__entry():106:73
        # Var: string t:47 EXPR_TEMPORARY align.swift:__entry():107:19
        # Var: file u:metricsfile align.swift:__entry():107:68
        # Var: $string$[int] v:sampleInfo VALUE_OF [string[int]:sampleInfo]
        # Var: $string v:alias:sampleName VALUE_OF [string:__alias:sampleName]
        # Var: $string v:alias:read1 VALUE_OF [string:__alias:read1]
        # Var: $string v:alias:read2 VALUE_OF [string:__alias:read2]
        lassign [ adlb::multicreate [ list container integer string 1 2 14 ] [ list string 2 1 15 ] [ list string 2 1 16 ] [ list string 2 1 17 ] [ list string 1 1 18 ] [ list string 1 1 20 ] [ list string 1 1 25 ] [ list string 1 1 27 ] ] u:sampleInfo u:read1 u:read2 u:rgheader t:17 t:22 t:42 t:47
        turbine::c::log "allocated u:sampleInfo=<${u:sampleInfo}> u:read1=<${u:read1}> u:read2=<${u:read2}> u:rgheader=<${u:rgheader}> t:17=<${t:17}>"
        turbine::c::log "allocated t:22=<${t:22}> t:42=<${t:42}> t:47=<${t:47}>"
        lassign [ turbine::make_file_tds [ adlb::multicreate [ list file 2 1 19 ] [ list file 2 1 21 ] [ list file 0 1 22 ] [ list file 0 1 23 ] [ list file 0 1 24 ] [ list file 1 1 26 ] [ list file 0 1 28 ] ] [ list 1 1 1 1 1 1 1 ] ] u:alignedsam u:alignedbam u:dedupsam u:dedupbam u:dedupsortedbam u:alignedsortedbam u:metricsfile
        set v:sampleInfo [ turbine::split_impl ${v:sample} " " ]
        turbine::build_rec ${u:sampleInfo} ${v:sampleInfo} [ list container integer string ] 0 1
        set a:sampleName [ adlb::subscript_container ${u:sampleInfo} 0 ]
        set v:alias:sampleName [ turbine::retrieve_string ${a:sampleName} ]
        set a:read1 [ adlb::subscript_container ${u:sampleInfo} 1 ]
        set v:alias:read1 [ turbine::retrieve_string ${a:read1} ]
        turbine::store_string ${u:read1} ${v:alias:read1}
        set a:read2 [ adlb::subscript_container ${u:sampleInfo} 2 ]
        set v:alias:read2 [ turbine::retrieve_string ${a:read2} CACHED 1 ]
        turbine::store_string ${u:read2} ${v:alias:read2}
        turbine::rule [ list ${t:52} ] [ list __entry-if1 ${t:17} ${t:18} ${t:22} ${t:42} ${t:47} ${t:52} ${t:53} ${v:alias:read1} ${v:alias:read2} ${u:alignedbam} ${u:alignedsam} ${u:alignedsortedbam} ${u:metricsfile} ${u:read1} ${u:read2} ${u:rgheader} ${u:vars} ]
        turbine::rule [ list ${t:11} ${t:13} ${t:15} ] [ list __entry-async_op-sprintf ${t:11} ${t:13} ${t:15} ${v:alias:sampleName} ${u:rgheader} ]
        turbine::rule [ list ${t:23} ] [ list __entry-optmerged ${t:22} ${t:23} ${t:42} ${t:47} ${v:alias:sampleName} ${u:alignedbam} ${u:alignedsortedbam} ${u:dedupbam} ${u:dedupsortedbam} ${u:metricsfile} ]
        turbine::rule [ list ${t:18} ] [ list __entry-optmerged-1 ${t:17} ${t:18} ${v:alias:sampleName} ${u:alignedsam} ${u:dedupsam} ]
        adlb::write_refcount_decr ${u:sampleInfo} 1
    }
    turbine::decr_local_file_refcount v:sampleInfoFile
    turbine::read_refcount_decr ${t:18} 1
    turbine::read_refcount_decr ${t:15} 1
    turbine::read_refcount_decr ${t:11} 1
    turbine::read_refcount_decr ${t:23} 1
    turbine::read_refcount_decr ${t:13} 1
    turbine::read_refcount_decr ${u:vars} 1
    turbine::read_refcount_decr ${t:52} 1
    turbine::read_refcount_decr ${t:53} 1
}


proc __entry-if1 { t:17 t:18 t:22 t:42 t:47 t:52 t:53 v:alias:read1 v:alias:read2 u:alignedbam u:alignedsam u:alignedsortedbam u:metricsfile u:read1 u:read2 u:rgheader u:vars } {
    # Var: $boolean v:__t:52 VALUE_OF [boolean:__t:52] align.swift:__entry():117:42
    set v:__t:52 [ turbine::retrieve_integer ${t:52} CACHED 1 ]
    if { ${v:__t:52} } {
        # Var: string t:57 EXPR_TEMPORARY align.swift:__entry():118:14
        lassign [ adlb::multicreate [ list string 1 1 29 ] ] t:57
        turbine::c::log "allocated t:57=<${t:57}>"
        turbine::read_refcount_incr ${u:vars} 4
        turbine::read_refcount_incr ${t:17} 1
        turbine::container_reference ${u:vars} "ALIGNERTOOL" ${t:57} string
        turbine::rule [ list ${t:57} ] [ list __entry-async_op-eq_string ${t:17} ${t:57} ${v:alias:read1} ${v:alias:read2} ${u:alignedbam} ${u:alignedsam} ${u:read1} ${u:read2} ${u:rgheader} ${u:vars} ]
    } else {
        turbine::read_refcount_incr ${t:53} 1
        turbine::read_refcount_incr ${t:42} 1
        turbine::read_refcount_incr ${t:22} 1
        turbine::read_refcount_incr ${t:47} 1
        turbine::file_read_refcount_incr ${u:alignedsortedbam} 1
        turbine::read_refcount_incr ${t:18} 1
        turbine::rule [ list ${t:53} ] "__entry-async_op-eq_string-1 ${t:18} ${t:22} ${t:42} ${t:47} ${t:53} {${u:alignedbam}} {${u:alignedsam}} {${u:alignedsortedbam}} {${u:metricsfile}} ${u:read1} ${u:read2} ${u:rgheader} ${u:vars}"
    }
    turbine::read_refcount_decr ${t:18} 1
    turbine::read_refcount_decr ${t:47} 1
    turbine::read_refcount_decr ${t:17} 1
    turbine::read_refcount_decr ${t:22} 1
    turbine::file_read_refcount_decr ${u:alignedbam} 1
    turbine::read_refcount_decr ${u:read2} 1
    turbine::read_refcount_decr ${t:42} 1
    turbine::read_refcount_decr ${t:53} 1
    turbine::read_refcount_decr ${u:read1} 1
    turbine::file_read_refcount_decr ${u:alignedsortedbam} 1
    turbine::file_read_refcount_decr ${u:alignedsam} 1
    turbine::read_refcount_decr ${u:vars} 1
    turbine::read_refcount_decr ${u:rgheader} 1
}


proc __entry-async_op-eq_string { t:17 t:57 v:alias:read1 v:alias:read2 u:alignedbam u:alignedsam u:read1 u:read2 u:rgheader u:vars } {
    # Var: $string v:t:57 VALUE_OF [string:__t:57]
    # Var: $boolean v:t:56 VALUE_OF [boolean:__t:56]
    set v:t:57 [ turbine::retrieve_string ${t:57} CACHED 1 ]
    set v:t:56 [ string equal ${v:t:57} "BWAMEM" ]
    if { ${v:t:56} } {
        # Var: string c:s_u OPT_TEMPORARY
        global c:s_u
        # Var: string t:60 EXPR_TEMPORARY align.swift:__entry():119:21
        # Var: string t:62 EXPR_TEMPORARY align.swift:__entry():119:51
        # Var: string t:64 EXPR_TEMPORARY align.swift:__entry():119:69
        # Var: int t:66 EXPR_TEMPORARY align.swift:__entry():119:91
        # Var: string t:67 EXPR_TEMPORARY align.swift:__entry():119:102
        # Var: string t:69 EXPR_TEMPORARY align.swift:__entry():120:31
        lassign [ adlb::multicreate [ list string 1 1 30 ] [ list string 1 1 31 ] [ list string 1 1 32 ] [ list integer 1 1 33 ] [ list string 1 1 34 ] [ list string 1 1 35 ] ] t:60 t:62 t:64 t:66 t:67 t:69
        turbine::c::log "allocated t:60=<${t:60}> t:62=<${t:62}> t:64=<${t:64}> t:66=<${t:66}> t:67=<${t:67}>"
        turbine::c::log "allocated t:69=<${t:69}>"
        turbine::read_refcount_incr ${u:vars} 2
        turbine::container_reference ${u:vars} "BWADIR" ${t:60} string
        turbine::container_reference ${u:vars} "BWAINDEX" ${t:62} string
        turbine::container_reference ${u:vars} "BWAMEMPARAMS" ${t:64} string
        turbine::container_reference ${u:vars} "PBSCORES" ${t:67} string
        f:bwa ${u:alignedsam} ${t:60} ${u:read1} ${u:read2} ${t:62} ${t:64} ${t:66} ${u:rgheader} -100 "HARD" "RANK"
        turbine::container_reference ${u:vars} "SAMTOOLSDIR" ${t:69} string
        f:samtools_view ${u:alignedbam} ${t:69} ${u:alignedsam} ${t:66} ${c:s_u} -100 "HARD" "RANK"
        turbine::rule [ list ${t:67} ] "__entry-async_op-parse_int ${t:66} ${t:67}"
        turbine::read_refcount_decr ${t:60} 1
        turbine::read_refcount_decr ${t:69} 1
        turbine::read_refcount_decr ${t:66} 1
        turbine::read_refcount_decr ${t:62} 1
        turbine::read_refcount_decr ${t:64} 1
    } else {
        # Var: string t:76 EXPR_TEMPORARY align.swift:__entry():123:34
        # Var: string t:80 EXPR_TEMPORARY align.swift:__entry():123:87
        # Var: string t:84 EXPR_TEMPORARY align.swift:__entry():123:127
        lassign [ adlb::multicreate [ list string 1 1 36 ] [ list string 1 1 37 ] [ list string 1 1 38 ] ] t:76 t:80 t:84
        turbine::c::log "allocated t:76=<${t:76}> t:80=<${t:80}> t:84=<${t:84}>"
        turbine::read_refcount_incr ${u:rgheader} 1
        turbine::read_refcount_incr ${t:17} 1
        turbine::container_reference ${u:vars} "NOVOCRAFTDIR" ${t:76} string
        turbine::container_reference ${u:vars} "NOVOALIGNINDEX" ${t:80} string
        turbine::container_reference ${u:vars} "PBSCORES" ${t:84} string
        turbine::rule [ list ${t:17} ${t:76} ${t:80} ${t:84} ${u:rgheader} ] [ list __entry-async_op-parse_int-1 ${t:17} ${t:76} ${t:80} ${t:84} ${v:alias:read1} ${v:alias:read2} ${u:alignedsam} ${u:rgheader} ]
    }
    turbine::read_refcount_decr ${t:17} 1
    turbine::file_read_refcount_decr ${u:alignedsam} 1
    turbine::file_read_refcount_decr ${u:alignedbam} 1
    turbine::read_refcount_decr ${u:vars} 1
    turbine::read_refcount_decr ${u:rgheader} 1
    turbine::read_refcount_decr ${u:read2} 1
    turbine::read_refcount_decr ${u:read1} 1
}


proc __entry-async_op-parse_int { t:66 t:67 } {
    # Var: $string v:t:67 VALUE_OF [string:__t:67]
    # Var: $int v:t:66 VALUE_OF [int:__t:66]
    set v:t:67 [ turbine::retrieve_string ${t:67} CACHED 1 ]
    set v:t:66 [ turbine::parse_int_impl ${v:t:67} 10 ]
    turbine::store_integer ${t:66} ${v:t:66}
}


proc __entry-async_op-parse_int-1 { t:17 t:76 t:80 t:84 v:alias:read1 v:alias:read2 u:alignedsam u:rgheader } {
    # Var: $string v:t:84 VALUE_OF [string:__t:84]
    # Var: $int v:t:83 VALUE_OF [int:__t:83]
    # Var: $string v:t:76 VALUE_OF [string:__t:76]
    # Var: $string v:t:75 VALUE_OF [string:__t:75]
    # Var: $string v:INDEX RENAMED [$string:__v:INDEX] align.swift:novoalign():19:100
    # Var: $string v:rgheader RENAMED [$string:__v:rgheader] align.swift:novoalign():19:100
    # Var: $string v:__filename:output RENAMED [$string:__v:__filename:output] align.swift:novoalign():19:100
    # Var: $file v:output RENAMED [$file:__v:output] align.swift:novoalign():19:100
    set v:t:84 [ turbine::retrieve_string ${t:84} CACHED 1 ]
    set v:t:83 [ turbine::parse_int_impl ${v:t:84} 10 ]
    set v:t:76 [ turbine::retrieve_string ${t:76} CACHED 1 ]
    set v:t:75 "${v:t:76}/novoalign"
    set v:INDEX [ turbine::retrieve_string ${t:80} CACHED 1 ]
    set v:rgheader [ turbine::retrieve_string ${u:rgheader} CACHED 1 ]
    set v:__filename:output [ turbine::retrieve_string ${t:17} CACHED 1 ]
    set tcltmp:init_rc 2
    set v:output [ turbine::create_local_file_ref ${v:__filename:output} ${tcltmp:init_rc} 1 ]
    turbine::c::log [ list exec: __v:t:75 " " "-c" ${v:t:83} "-d" ${v:INDEX} "-f" ${v:alias:read1} ${v:alias:read2} "-o" "SAM" ${v:rgheader} [ dict create "stdout" ${v:__filename:output} ] ]
    turbine::exec_external ${v:t:75} [ dict create "stdout" ${v:__filename:output} ] " " "-c" ${v:t:83} "-d" ${v:INDEX} "-f" ${v:alias:read1} ${v:alias:read2} "-o" "SAM" ${v:rgheader}
    turbine::store_file ${u:alignedsam} v:output 0
    turbine::decr_local_file_refcount v:output
}


proc __entry-async_op-eq_string-1 { t:18 t:22 t:42 t:47 t:53 u:alignedbam u:alignedsam u:alignedsortedbam u:metricsfile u:read1 u:read2 u:rgheader u:vars } {
    # Var: $string v:t:53:1 VALUE_OF [string:__t:53]
    # Var: $boolean v:t:86 VALUE_OF [boolean:__t:86]
    set v:t:53:1 [ turbine::retrieve_string ${t:53} CACHED 1 ]
    set v:t:86 [ string equal ${v:t:53:1} "PICARD" ]
    if { ${v:t:86} } {
        # Var: string c:s_u OPT_TEMPORARY
        global c:s_u
        # Var: string t:90 EXPR_TEMPORARY align.swift:__entry():135:20
        # Var: string t:92 EXPR_TEMPORARY align.swift:__entry():135:50
        # Var: string t:94 EXPR_TEMPORARY align.swift:__entry():135:68
        # Var: int t:96 EXPR_TEMPORARY align.swift:__entry():135:90
        # Var: string t:97 EXPR_TEMPORARY align.swift:__entry():135:101
        # Var: string t:99 EXPR_TEMPORARY align.swift:__entry():136:30
        # Var: string t:105 EXPR_TEMPORARY align.swift:__entry():137:31
        # Var: string t:106 EXPR_TEMPORARY align.swift:__entry():137:38
        # Var: string t:116 EXPR_TEMPORARY align.swift:__entry():138:37
        # Var: string t:118 EXPR_TEMPORARY align.swift:__entry():138:54
        # Var: $string optf:outputfile RENAMED [$string:__of:outputfile]
        lassign [ adlb::multicreate [ list string 1 1 39 ] [ list string 1 1 40 ] [ list string 1 1 41 ] [ list integer 1 1 42 ] [ list string 1 1 43 ] [ list string 1 1 44 ] [ list string 1 1 45 ] [ list string 1 1 46 ] [ list string 1 1 47 ] [ list string 1 1 48 ] ] t:90 t:92 t:94 t:96 t:97 t:99 t:105 t:106 t:116 t:118
        turbine::c::log "allocated t:90=<${t:90}> t:92=<${t:92}> t:94=<${t:94}> t:96=<${t:96}> t:97=<${t:97}>"
        turbine::c::log "allocated t:99=<${t:99}> t:105=<${t:105}> t:106=<${t:106}> t:116=<${t:116}> t:118=<${t:118}>"
        turbine::read_refcount_incr ${t:42} 1
        turbine::read_refcount_incr ${u:vars} 8
        turbine::file_read_refcount_incr ${u:alignedbam} 1
        turbine::read_refcount_incr ${t:22} 1
        turbine::read_refcount_incr ${t:47} 1
        turbine::file_read_refcount_incr ${u:alignedsortedbam} 1
        turbine::read_refcount_incr ${t:18} 1
        turbine::container_reference ${u:vars} "BWADIR" ${t:90} string
        turbine::container_reference ${u:vars} "BWAINDEX" ${t:92} string
        turbine::container_reference ${u:vars} "BWAMEMPARAMS" ${t:94} string
        turbine::container_reference ${u:vars} "PBSCORES" ${t:97} string
        f:bwa ${u:alignedsam} ${t:90} ${u:read1} ${u:read2} ${t:92} ${t:94} ${t:96} ${u:rgheader} -100 "HARD" "RANK"
        turbine::container_reference ${u:vars} "SAMTOOLSDIR" ${t:99} string
        f:samtools_view ${u:alignedbam} ${t:99} ${u:alignedsam} ${t:96} ${c:s_u} -100 "HARD" "RANK"
        turbine::container_reference ${u:vars} "NOVOCRAFTDIR" ${t:106} string
        turbine::container_reference ${u:vars} "JAVADIR" ${t:116} string
        turbine::container_reference ${u:vars} "PICARDDIR" ${t:118} string
        set optf:outputfile [ turbine::mktemp ]
        turbine::rule [ list ${t:97} ] [ list __entry-async_op-parse_int-2 ${optf:outputfile} ${t:105} ${t:116} ${t:118} ${t:18} ${t:22} ${t:42} ${t:47} ${t:96} ${t:97} ${u:alignedbam} ${u:alignedsortedbam} ${u:metricsfile} ]
        turbine::rule [ list ${t:106} ] "__entry-async_op-strcat ${t:105} ${t:106}"
        turbine::read_refcount_decr ${t:90} 1
        turbine::read_refcount_decr ${t:92} 1
        turbine::read_refcount_decr ${t:99} 1
        turbine::read_refcount_decr ${t:94} 1
        turbine::read_refcount_decr ${t:96} 1
    }
    turbine::read_refcount_decr ${t:18} 1
    turbine::file_read_refcount_decr ${u:alignedsortedbam} 1
    turbine::read_refcount_decr ${t:47} 1
    turbine::read_refcount_decr ${t:22} 1
    turbine::file_read_refcount_decr ${u:alignedsam} 1
    turbine::file_read_refcount_decr ${u:alignedbam} 1
    turbine::read_refcount_decr ${u:vars} 1
    turbine::read_refcount_decr ${u:rgheader} 1
    turbine::read_refcount_decr ${u:read2} 1
    turbine::read_refcount_decr ${t:42} 1
    turbine::read_refcount_decr ${u:read1} 1
}


proc __entry-async_op-parse_int-2 { optf:outputfile t:105 t:116 t:118 t:18 t:22 t:42 t:47 t:96 t:97 u:alignedbam u:alignedsortedbam u:metricsfile } {
    # Var: $string v:t:97 VALUE_OF [string:__t:97]
    # Var: $int v:t:96 VALUE_OF [int:__t:96]
    set v:t:97 [ turbine::retrieve_string ${t:97} CACHED 1 ]
    set v:t:96 [ turbine::parse_int_impl ${v:t:97} 10 ]
    turbine::store_integer ${t:96} ${v:t:96}
    turbine::rule [ list ${t:105} ${t:18} ${t:22} ${t:42} [ turbine::get_file_td ${u:alignedbam} ] ] [ list novosort-app-leaf1 ${optf:outputfile} ${t:105} ${t:116} ${t:118} ${t:18} ${t:22} ${t:42} ${t:47} ${v:t:96} ${u:alignedbam} ${u:alignedsortedbam} ${u:metricsfile} ]
}


proc novosort-app-leaf1 { optf:outputfile t:105 t:116 t:118 t:18 t:22 t:42 t:47 v:t:96 u:alignedbam u:alignedsortedbam u:metricsfile } {
    # Var: $string v:novosortdir RENAMED [$string:__v:novosortdir] align.swift:novosort():46:83
    # Var: $string v:tmpdir RENAMED [$string:__v:tmpdir] align.swift:novosort():46:83
    # Var: $string v:__filename:inputFilename RENAMED [$string:__v:__filename:inputFilename] align.swift:novosort():46:83
    # Var: $string v:__filename:output:1 RENAMED [$string:__v:__filename:output] align.swift:novosort():46:83
    # Var: $file v:inputFilename RENAMED [$file:__v:inputFilename] align.swift:novosort():46:83
    # Var: $file v:output:1 RENAMED [$file:__v:output] align.swift:novosort():46:83
    set v:novosortdir [ turbine::retrieve_string ${t:105} CACHED 1 ]
    set v:tmpdir [ turbine::retrieve_string ${t:18} CACHED 1 ]
    set v:__filename:inputFilename [ turbine::retrieve_string ${t:22} CACHED 1 ]
    set v:__filename:output:1 [ turbine::retrieve_string ${t:42} CACHED 1 ]
    set v:inputFilename [ turbine::retrieve_file ${u:alignedbam} CACHED 1 ]
    set tcltmp:init_rc 2
    set v:output:1 [ turbine::create_local_file_ref ${v:__filename:output:1} ${tcltmp:init_rc} 1 ]
    turbine::c::log [ list exec: __v:novosortdir "--index" "--tmpdir" ${v:tmpdir} "--threads" ${v:t:96} ${v:__filename:inputFilename} "-o" ${v:__filename:output:1} "\"\"" [ dict create ] ]
    turbine::exec_external ${v:novosortdir} [ dict create ] "--index" "--tmpdir" ${v:tmpdir} "--threads" ${v:t:96} ${v:__filename:inputFilename} "-o" ${v:__filename:output:1} "\"\""
    turbine::store_file ${u:alignedsortedbam} v:output:1 0
    turbine::rule [ list ${t:116} ${t:118} ${t:47} ] [ list picard-app-leaf1 ${optf:outputfile} ${t:116} ${t:118} ${t:47} ${v:__filename:output:1} ${u:alignedsortedbam} ${u:metricsfile} ]
    turbine::decr_local_file_refcount v:output:1
}


proc picard-app-leaf1 { optf:outputfile t:116 t:118 t:47 v:__filename:output:1 u:alignedsortedbam u:metricsfile } {
    # Var: $string v:javadir RENAMED [$string:__v:javadir] align.swift:picard():51:110
    # Var: $string v:picarddir RENAMED [$string:__v:picarddir] align.swift:picard():51:110
    # Var: $string v:__filename:metricsfile RENAMED [$string:__v:__filename:metricsfile] align.swift:picard():51:110
    # Var: $file v:inputFilename:1 RENAMED [$file:__v:inputFilename] align.swift:picard():51:110
    # Var: $file v:outputfile RENAMED [$file:__v:outputfile] align.swift:picard():51:110
    # Var: $file v:metricsfile RENAMED [$file:__v:metricsfile] align.swift:picard():51:110
    set v:javadir [ turbine::retrieve_string ${t:116} CACHED 1 ]
    set v:picarddir [ turbine::retrieve_string ${t:118} CACHED 1 ]
    set v:__filename:metricsfile [ turbine::retrieve_string ${t:47} CACHED 1 ]
    set v:inputFilename:1 [ turbine::retrieve_file ${u:alignedsortedbam} CACHED 1 ]
    set tcltmp:init_rc 1
    set v:outputfile [ turbine::create_local_file_ref ${optf:outputfile} ${tcltmp:init_rc} 0 ]
    set tcltmp:init_rc 2
    set v:metricsfile [ turbine::create_local_file_ref ${v:__filename:metricsfile} ${tcltmp:init_rc} 1 ]
    turbine::c::log [ list exec: __v:javadir "-jar" ${v:picarddir} "MarkDuplicates" "INPUT=" ${v:__filename:output:1} "OUTPUT=" ${optf:outputfile} "METRICS_FILE=" ${v:__filename:metricsfile} [ dict create ] ]
    turbine::exec_external ${v:javadir} [ dict create ] "-jar" ${v:picarddir} "MarkDuplicates" "INPUT=" ${v:__filename:output:1} "OUTPUT=" ${optf:outputfile} "METRICS_FILE=" ${v:__filename:metricsfile}
    turbine::store_file ${u:metricsfile} v:metricsfile 0
    turbine::decr_local_file_refcount v:outputfile
    turbine::decr_local_file_refcount v:metricsfile
}


proc __entry-async_op-strcat { t:105 t:106 } {
    # Var: $string v:t:106 VALUE_OF [string:__t:106]
    # Var: $string v:t:105 VALUE_OF [string:__t:105]
    set v:t:106 [ turbine::retrieve_string ${t:106} CACHED 1 ]
    set v:t:105 "${v:t:106}/novosort"
    turbine::store_string ${t:105} ${v:t:105}
}


proc __entry-async_op-sprintf { t:11 t:13 t:15 v:alias:sampleName u:rgheader } {
    # Var: $string v:t:11 VALUE_OF [string:__t:11]
    # Var: $string v:t:13 VALUE_OF [string:__t:13]
    # Var: $string v:t:15 VALUE_OF [string:__t:15]
    # Var: $string v:rgheader:1 VALUE_OF [string:rgheader]
    set v:t:11 [ turbine::retrieve_string ${t:11} CACHED 1 ]
    set v:t:13 [ turbine::retrieve_string ${t:13} CACHED 1 ]
    set v:t:15 [ turbine::retrieve_string ${t:15} CACHED 1 ]
    set v:rgheader:1 [ eval format [ list "@RG\tID:%s\tLB:%s\tPL:%s\tPU:%s\tSM:%s\tCN:%s" ${v:alias:sampleName} ${v:t:11} ${v:t:13} ${v:alias:sampleName} ${v:alias:sampleName} ${v:t:15} ] ]
    turbine::store_string ${u:rgheader} ${v:rgheader:1}
}


proc __entry-optmerged { t:22 t:23 t:42 t:47 v:alias:sampleName u:alignedbam u:alignedsortedbam u:dedupbam u:dedupsortedbam u:metricsfile } {
    # Var: $string v:t:23 VALUE_OF [string:__t:23]
    # Var: $string v:t:22 VALUE_OF [string:__t:22]
    # Var: $string v:t:32 VALUE_OF [string:__t:32]
    # Var: $string v:t:37 VALUE_OF [string:__t:37]
    # Var: $string v:t:42 VALUE_OF [string:__t:42]
    # Var: $string v:t:47 VALUE_OF [string:__t:47]
    set v:t:23 [ turbine::retrieve_string ${t:23} CACHED 1 ]
    set v:t:22 "${v:t:23}/align/${v:alias:sampleName}.nodups.bam"
    turbine::store_string ${t:22} ${v:t:22}
    set v:t:32 "${v:t:23}/align/${v:alias:sampleName}.wdups.bam"
    set v:t:37 "${v:t:23}/align/${v:alias:sampleName}.wdups.sorted.bam"
    set v:t:42 "${v:t:23}/align/${v:alias:sampleName}.nodups.sorted.bam"
    turbine::store_string ${t:42} ${v:t:42}
    set v:t:47 "${v:t:23}/align/${v:alias:sampleName}.picard.metrics"
    turbine::store_string ${t:47} ${v:t:47}
    turbine::set_filename_val ${u:alignedbam} ${v:t:22}
    turbine::set_filename_val ${u:dedupbam} ${v:t:32}
    turbine::set_filename_val ${u:dedupsortedbam} ${v:t:37}
    turbine::set_filename_val ${u:alignedsortedbam} ${v:t:42}
    turbine::set_filename_val ${u:metricsfile} ${v:t:47}
}


proc __entry-optmerged-1 { t:17 t:18 v:alias:sampleName u:alignedsam u:dedupsam } {
    # Var: $string v:t:18 VALUE_OF [string:__t:18]
    # Var: $string v:t:17 VALUE_OF [string:__t:17]
    # Var: $string v:t:27 VALUE_OF [string:__t:27]
    set v:t:18 [ turbine::retrieve_string ${t:18} CACHED 1 ]
    set v:t:17 "${v:t:18}/align/${v:alias:sampleName}.nodups.sam"
    turbine::store_string ${t:17} ${v:t:17}
    set v:t:27 "${v:t:18}/align/${v:alias:sampleName}.wdups.sam"
    turbine::set_filename_val ${u:alignedsam} ${v:t:17}
    turbine::set_filename_val ${u:dedupsam} ${v:t:27}
}


proc __entry-async_op-eq_string-2 { t:52 t:53 } {
    # Var: $string v:t:53 VALUE_OF [string:__t:53]
    # Var: $boolean v:t:52 VALUE_OF [boolean:__t:52]
    set v:t:53 [ turbine::retrieve_string ${t:53} CACHED 1 ]
    set v:t:52 [ string equal ${v:t:53} "NOVOSORT" ]
    turbine::store_integer ${t:52} ${v:t:52}
}


proc f:bwa { u:output u:bwadir u:read1 u:read2 u:INDEX u:bwamemparams u:PBSCORES u:rgheader v:loc_rank v:loc_strictness v:loc_accuracy } {
    turbine::c::log "function: bwa"
    # Var: $boolean v:mapped_output OPT_TEMPORARY
    turbine::read_refcount_incr ${u:read1} 1
    turbine::read_refcount_incr ${u:read2} 1
    turbine::read_refcount_incr ${u:bwamemparams} 1
    turbine::read_refcount_incr ${u:rgheader} 1
    turbine::read_refcount_incr ${u:INDEX} 1
    turbine::read_refcount_incr ${u:bwadir} 1
    turbine::read_refcount_incr ${u:PBSCORES} 1
    turbine::file_read_refcount_incr ${u:output} 1
    set v:mapped_output [ turbine::is_file_mapped ${u:output} ]
    set filename:output [ turbine::get_file_path ${u:output} ]
    if { ${v:mapped_output} } {
    } else {
        # Var: $string optf:output FILENAME_OF [file:output]
        set optf:output [ turbine::mktemp ]
        turbine::set_filename_val ${u:output} ${optf:output}
    }
    turbine::rule [ list ${u:INDEX} ${u:PBSCORES} ${filename:output} ${u:bwadir} ${u:bwamemparams} ${u:read1} ${u:read2} ${u:rgheader} ] "bwa-app-leaf1 {${u:INDEX}} {${u:PBSCORES}} {${filename:output}} ${v:mapped_output} {${u:bwadir}} {${u:bwamemparams}} {${u:output}} {${u:read1}} {${u:read2}} {${u:rgheader}}" target ${v:loc_rank} strictness ${v:loc_strictness} accuracy ${v:loc_accuracy}
}


proc bwa-app-leaf1 { u:INDEX u:PBSCORES filename:output v:mapped_output u:bwadir u:bwamemparams u:output u:read1 u:read2 u:rgheader } {
    # Var: $string v:bwadir VALUE_OF [string:bwadir] align.swift:bwa():14:86
    # Var: $string v:bwamemparams VALUE_OF [string:bwamemparams] align.swift:bwa():14:86
    # Var: $int v:PBSCORES VALUE_OF [int:PBSCORES] align.swift:bwa():14:86
    # Var: $string v:rgheader VALUE_OF [string:rgheader] align.swift:bwa():14:86
    # Var: $string v:INDEX VALUE_OF [string:INDEX] align.swift:bwa():14:86
    # Var: $string v:read1 VALUE_OF [string:read1] align.swift:bwa():14:86
    # Var: $string v:read2 VALUE_OF [string:read2] align.swift:bwa():14:86
    # Var: $string v:__filename:output VALUE_OF [string:__filename:output] align.swift:bwa():14:86
    # Var: $file v:output VALUE_OF [file:output] align.swift:bwa():14:86
    # Var: $boolean v:3 EXPR_TEMPORARY align.swift:bwa():14:86
    set v:bwadir [ turbine::retrieve_string ${u:bwadir} CACHED 1 ]
    set v:bwamemparams [ turbine::retrieve_string ${u:bwamemparams} CACHED 1 ]
    set v:PBSCORES [ turbine::retrieve_integer ${u:PBSCORES} CACHED 1 ]
    set v:rgheader [ turbine::retrieve_string ${u:rgheader} CACHED 1 ]
    set v:INDEX [ turbine::retrieve_string ${u:INDEX} CACHED 1 ]
    set v:read1 [ turbine::retrieve_string ${u:read1} CACHED 1 ]
    set v:read2 [ turbine::retrieve_string ${u:read2} CACHED 1 ]
    set v:__filename:output [ turbine::retrieve_string ${filename:output} CACHED 1 ]
    if { ${v:mapped_output} } {
        set tcltmp:init_rc 2
    } else {
        set tcltmp:init_rc 1
    }
    set v:output [ turbine::create_local_file_ref ${v:__filename:output} ${tcltmp:init_rc} ${v:mapped_output} ]
    turbine::c::log [ list exec: __v:bwadir "mem" "-M" ${v:bwamemparams} "-t" ${v:PBSCORES} "-R" ${v:rgheader} ${v:INDEX} ${v:read1} ${v:read2} [ dict create "stdout" ${v:__filename:output} ] ]
    turbine::exec_external ${v:bwadir} [ dict create "stdout" ${v:__filename:output} ] "mem" "-M" ${v:bwamemparams} "-t" ${v:PBSCORES} "-R" ${v:rgheader} ${v:INDEX} ${v:read1} ${v:read2}
    set v:3 [ expr { ! ${v:mapped_output} } ]
    turbine::store_file ${u:output} v:output ${v:3}
    turbine::decr_local_file_refcount v:output
}


proc f:samtools_view { u:output u:samtoolsdir u:inputFilename u:thr u:u v:loc_rank v:loc_strictness v:loc_accuracy } {
    turbine::c::log "function: samtools_view"
    # Var: $boolean v:mapped_output OPT_TEMPORARY
    turbine::read_refcount_incr ${u:thr} 1
    turbine::read_refcount_incr ${u:u} 1
    turbine::file_read_refcount_incr ${u:inputFilename} 2
    turbine::file_read_refcount_incr ${u:output} 1
    turbine::read_refcount_incr ${u:samtoolsdir} 1
    set filename:inputFilename [ turbine::get_file_path ${u:inputFilename} ]
    set v:mapped_output [ turbine::is_file_mapped ${u:output} ]
    set filename:output [ turbine::get_file_path ${u:output} ]
    if { ${v:mapped_output} } {
    } else {
        # Var: $string optf:output FILENAME_OF [file:output]
        set optf:output [ turbine::mktemp ]
        turbine::set_filename_val ${u:output} ${optf:output}
    }
    turbine::rule [ list ${filename:inputFilename} ${filename:output} [ turbine::get_file_td ${u:inputFilename} ] ${u:samtoolsdir} ${u:thr} ${u:u} ] "samtools_view-app-leaf1 {${filename:inputFilename}} {${filename:output}} ${v:mapped_output} {${u:inputFilename}} {${u:output}} {${u:samtoolsdir}} {${u:thr}} {${u:u}}" target ${v:loc_rank} strictness ${v:loc_strictness} accuracy ${v:loc_accuracy}
}


proc samtools_view-app-leaf1 { filename:inputFilename filename:output v:mapped_output u:inputFilename u:output u:samtoolsdir u:thr u:u } {
    # Var: $string v:samtoolsdir VALUE_OF [string:samtoolsdir] align.swift:samtools_view():31:59
    # Var: $int v:thr VALUE_OF [int:thr] align.swift:samtools_view():31:59
    # Var: $string v:u VALUE_OF [string:u] align.swift:samtools_view():31:59
    # Var: $string v:__filename:inputFilename VALUE_OF [string:__filename:inputFilename] align.swift:samtools_view():31:59
    # Var: $string v:__filename:output VALUE_OF [string:__filename:output] align.swift:samtools_view():31:59
    # Var: $file v:inputFilename VALUE_OF [file:inputFilename] align.swift:samtools_view():31:59
    # Var: $file v:output VALUE_OF [file:output] align.swift:samtools_view():31:59
    # Var: $boolean v:3 EXPR_TEMPORARY align.swift:samtools_view():31:59
    set v:samtoolsdir [ turbine::retrieve_string ${u:samtoolsdir} CACHED 1 ]
    set v:thr [ turbine::retrieve_integer ${u:thr} CACHED 1 ]
    set v:u [ turbine::retrieve_string ${u:u} CACHED 1 ]
    set v:__filename:inputFilename [ turbine::retrieve_string ${filename:inputFilename} ]
    set v:__filename:output [ turbine::retrieve_string ${filename:output} CACHED 1 ]
    set v:inputFilename [ turbine::retrieve_file ${u:inputFilename} CACHED 2 ]
    if { ${v:mapped_output} } {
        set tcltmp:init_rc 2
    } else {
        set tcltmp:init_rc 1
    }
    set v:output [ turbine::create_local_file_ref ${v:__filename:output} ${tcltmp:init_rc} ${v:mapped_output} ]
    turbine::c::log [ list exec: __v:samtoolsdir "view" "-@" ${v:thr} "-bS" ${v:u} ${v:__filename:inputFilename} [ dict create "stdout" ${v:__filename:output} ] ]
    turbine::exec_external ${v:samtoolsdir} [ dict create "stdout" ${v:__filename:output} ] "view" "-@" ${v:thr} "-bS" ${v:u} ${v:__filename:inputFilename}
    set v:3 [ expr { ! ${v:mapped_output} } ]
    turbine::store_file ${u:output} v:output ${v:3}
    turbine::decr_local_file_refcount v:output
}

turbine::defaults
turbine::declare_custom_work_types COASTER
turbine::init $servers "Swift"
turbine::enable_read_refcount
adlb::declare_struct_type 16 s:location [ list "rank" integer "strictness" string "accuracy" string ]
turbine::check_constants "WORKER\[WORKER\]" ${turbine::WORK_TASK} 0 "CONTROL" ${turbine::WORK_TASK} 0 "ADLB_RANK_ANY" ${adlb::RANK_ANY} -100
adlb::add_debug_symbol 1 "__c:s_u" ""
adlb::add_debug_symbol 2 "__t:7" "align:88:33"
adlb::add_debug_symbol 3 "configFile" "align:83:0"
adlb::add_debug_symbol 4 "sampleInfoFile" "align:88:0"
adlb::add_debug_symbol 5 "vars" "align:86:0"
adlb::add_debug_symbol 6 "__t:11" "align:__entry():99:88"
adlb::add_debug_symbol 7 "__t:13" "align:__entry():99:106"
adlb::add_debug_symbol 8 "__t:15" "align:__entry():99:148"
adlb::add_debug_symbol 9 "__t:18" "align:__entry():101:25"
adlb::add_debug_symbol 10 "__t:23" "align:__entry():102:25"
adlb::add_debug_symbol 11 "__t:53" "align:__entry():117:12"
adlb::add_debug_symbol 12 "__t:52" "align:__entry():117:39"
adlb::add_debug_symbol 13 "keyValuePair" "align:getConfigVariables():70:2"
adlb::add_debug_symbol 14 "sampleInfo" "align:__entry():92:1"
adlb::add_debug_symbol 15 "read1" "align:__entry():94:1"
adlb::add_debug_symbol 16 "read2" "align:__entry():95:1"
adlb::add_debug_symbol 17 "rgheader" "align:__entry():99:1"
adlb::add_debug_symbol 18 "__t:17" "align:__entry():101:18"
adlb::add_debug_symbol 19 "alignedsam" "align:__entry():101:63"
adlb::add_debug_symbol 20 "__t:22" "align:__entry():102:18"
adlb::add_debug_symbol 21 "alignedbam" "align:__entry():102:66"
adlb::add_debug_symbol 22 "dedupsam" "align:__entry():103:62"
adlb::add_debug_symbol 23 "dedupbam" "align:__entry():104:65"
adlb::add_debug_symbol 24 "dedupsortedbam" "align:__entry():105:71"
adlb::add_debug_symbol 25 "__t:42" "align:__entry():106:24"
adlb::add_debug_symbol 26 "alignedsortedbam" "align:__entry():106:73"
adlb::add_debug_symbol 27 "__t:47" "align:__entry():107:19"
adlb::add_debug_symbol 28 "metricsfile" "align:__entry():107:68"
adlb::add_debug_symbol 29 "__t:57" "align:__entry():118:14"
adlb::add_debug_symbol 30 "__t:60" "align:__entry():119:21"
adlb::add_debug_symbol 31 "__t:62" "align:__entry():119:51"
adlb::add_debug_symbol 32 "__t:64" "align:__entry():119:69"
adlb::add_debug_symbol 33 "__t:66" "align:__entry():119:91"
adlb::add_debug_symbol 34 "__t:67" "align:__entry():119:102"
adlb::add_debug_symbol 35 "__t:69" "align:__entry():120:31"
adlb::add_debug_symbol 36 "__t:76" "align:__entry():123:34"
adlb::add_debug_symbol 37 "__t:80" "align:__entry():123:87"
adlb::add_debug_symbol 38 "__t:84" "align:__entry():123:127"
adlb::add_debug_symbol 39 "__t:90" "align:__entry():135:20"
adlb::add_debug_symbol 40 "__t:92" "align:__entry():135:50"
adlb::add_debug_symbol 41 "__t:94" "align:__entry():135:68"
adlb::add_debug_symbol 42 "__t:96" "align:__entry():135:90"
adlb::add_debug_symbol 43 "__t:97" "align:__entry():135:101"
adlb::add_debug_symbol 44 "__t:99" "align:__entry():136:30"
adlb::add_debug_symbol 45 "__t:105" "align:__entry():137:31"
adlb::add_debug_symbol 46 "__t:106" "align:__entry():137:38"
adlb::add_debug_symbol 47 "__t:116" "align:__entry():138:37"
adlb::add_debug_symbol 48 "__t:118" "align:__entry():138:54"
turbine::start swift:main swift:constants
turbine::finalize
